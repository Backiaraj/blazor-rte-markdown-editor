@page "/"

@using Syncfusion.Blazor.RichTextEditor;
@using Markdig;

<div class="control-section">
    <div class="e-rte-preview" style="height:500px;">
        <div class="container">
            <div class="row">
                <div class="col" style="height:500px;width:400px;">
                    <SfRichTextEditor @bind-Value="@mdValue" SaveInterval="1" EditorMode="EditorMode.Markdown">
                        <RichTextEditorEvents ValueChange="onValueChange"></RichTextEditorEvents>
                        <RichTextEditorToolbarSettings Items="@tools" Type="ToolbarType.MultiRow" />
                        <RichTextEditorMarkdownOptions ListSyntax="ListSyntax" FormatSyntax="FormatSyntax"
                                                       SelectionSyntax="SelectionSyntax">
                        </RichTextEditorMarkdownOptions>
                    </SfRichTextEditor>
                </div>
                <div class="col" style="height:500px;width:400px">
                    <SfRichTextEditor Readonly="true" @bind-Value="@htmlValue">
                        <RichTextEditorToolbarSettings Enable="false" />
                    </SfRichTextEditor>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    private MarkdownPipeline? pipeline { get; set; }

    private string? htmlValue { get; set; }

    public static string mdValue { get; set; } = @"Microsoft has kept in mind additional principles updating the icons.

More specifically, a change is acceptable if it does not alter the original meaning of an icon;

Legibility works only with appropriate combinations of contrast and icon symbols and colors should always make it
easy to understand what an icon refers to.

Icons are not the only update in terms of legibility, accessibility, and rest for your eyes.

There is also some news about fonts, as discussed in the next section.";

    private List<ToolbarItemModel> tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    private Dictionary<string, string> ListSyntax { get; set; } = new Dictionary<string, string>()
    {
        { "OL", "2. " },
        { "UL", "+ " }
    };

    private Dictionary<string, string> FormatSyntax { get; set; } = new Dictionary<string, string>()
    {
        { "Blockquote", "> " }
    };

    private Dictionary<string, string> SelectionSyntax { get; set; } = new Dictionary<string, string>()
    {
        { "Bold", "__" },
        { "Italic", "_" }
    };

    protected override void OnInitialized()
    {
        pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        this.htmlValue = Markdig.Markdown.ToHtml(mdValue, pipeline);
        base.OnInitialized();
    }

    private void onValueChange(Syncfusion.Blazor.RichTextEditor.ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            this.htmlValue = null;
        }
        else
        {
            this.htmlValue = Markdig.Markdown.ToHtml(args.Value, pipeline);
        }
    }
}
